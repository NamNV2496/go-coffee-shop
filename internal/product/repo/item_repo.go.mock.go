// Code generated by MockGen. DO NOT EDIT.
// Source: item_repo.go
//
// Generated by this command:
//
//	mockgen -source=item_repo.go -destination=item_repo.go.mock.go -package=repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	domain "github.com/namnv2496/go-coffee-shop-demo/internal/product/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockItemRepo is a mock of ItemRepo interface.
type MockItemRepo struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepoMockRecorder
}

// MockItemRepoMockRecorder is the mock recorder for MockItemRepo.
type MockItemRepoMockRecorder struct {
	mock *MockItemRepo
}

// NewMockItemRepo creates a new mock instance.
func NewMockItemRepo(ctrl *gomock.Controller) *MockItemRepo {
	mock := &MockItemRepo{ctrl: ctrl}
	mock.recorder = &MockItemRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepo) EXPECT() *MockItemRepoMockRecorder {
	return m.recorder
}

// AddNewProduct mocks base method.
func (m *MockItemRepo) AddNewProduct(ctx context.Context, item domain.Item, img string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewProduct", ctx, item, img)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewProduct indicates an expected call of AddNewProduct.
func (mr *MockItemRepoMockRecorder) AddNewProduct(ctx, item, img any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewProduct", reflect.TypeOf((*MockItemRepo)(nil).AddNewProduct), ctx, item, img)
}

// GetAll mocks base method.
func (m *MockItemRepo) GetAll(ctx context.Context, offset, limit int32) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, offset, limit)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockItemRepoMockRecorder) GetAll(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockItemRepo)(nil).GetAll), ctx, offset, limit)
}

// GetByIdOrName mocks base method.
func (m *MockItemRepo) GetByIdOrName(ctx context.Context, id int32, name string, offset, limit int32) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdOrName", ctx, id, name, offset, limit)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdOrName indicates an expected call of GetByIdOrName.
func (mr *MockItemRepoMockRecorder) GetByIdOrName(ctx, id, name, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdOrName", reflect.TypeOf((*MockItemRepo)(nil).GetByIdOrName), ctx, id, name, offset, limit)
}

// GetByIdOrNameOrType mocks base method.
func (m *MockItemRepo) GetByIdOrNameOrType(ctx context.Context, id int32, name string, itemType, offset, limit int32) ([]domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdOrNameOrType", ctx, id, name, itemType, offset, limit)
	ret0, _ := ret[0].([]domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdOrNameOrType indicates an expected call of GetByIdOrNameOrType.
func (mr *MockItemRepoMockRecorder) GetByIdOrNameOrType(ctx, id, name, itemType, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdOrNameOrType", reflect.TypeOf((*MockItemRepo)(nil).GetByIdOrNameOrType), ctx, id, name, itemType, offset, limit)
}
